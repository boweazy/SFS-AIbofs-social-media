You are my Replit build agent. Unify the SocialScale + SmartFlow project to a single public port by serving the React UI (client/dist) from the Node/Express server. Keep Flask available if it’s running, but don’t rely on it for the public port. Apply the changes below exactly.

================================
ASSERT FOLDERS
================================
- If not present, create folder structure:
  /client        (React/Vite app root)
  /client/index.html (placeholder if missing)
  /server.js     (Express API + static hosting)

================================
FILE: package.json  (create or merge)
================================
{
  "name": "socialscale-smartflow",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "node server.js",
    "build": "npm --prefix client ci && npm --prefix client run build",
    "start": "node server.js",
    "postinstall": "echo Postinstall ok"
  },
  "dependencies": {
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "helmet": "^7.1.0"
  }
}

================================
FILE: server.js  (replace entirely)
================================
import 'dotenv/config';
import express from 'express';
import helmet from 'helmet';
import compression from 'compression';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname  = path.dirname(__filename);

// --- App + security
const app = express();
app.use(helmet({
  contentSecurityPolicy: {
    useDefaults: true,
    directives: {
      "img-src": ["'self'", "data:"],
      "script-src": ["'self'"],
      "connect-src": ["'self'", "https:", "http:"],
      "style-src": ["'self'", "'unsafe-inline'"]
    }
  },
  crossOriginEmbedderPolicy: false
}));
app.use(compression());
app.use(express.json({ limit: '1mb' }));
app.use(cors());

// --- Health check
app.get('/health', (_req, res) => res.json({ ok: true, ts: Date.now() }));

// --- (KEEP YOUR EXISTING API ROUTES HERE) ---
// If you already have server routes like /api/generate_posts, etc., DO NOT delete them.
// This file only ensures SPA hosting + fallback. Example placeholder:
app.get('/api/_example', (_req, res)=> res.json({ ok: true, msg: 'API alive' }));

// --- Static hosting of React build (client/dist)
const DIST = path.join(__dirname, 'client', 'dist');
const HAS_BUILD = fs.existsSync(DIST);

// Serve static if built, else show a friendly status page
if (HAS_BUILD) {
  app.use(express.static(DIST, { extensions: ['html'] }));
  // SPA fallback
  app.get('*', (_req, res) => res.sendFile(path.join(DIST, 'index.html')));
} else {
  app.get('*', (_req, res) => {
    res.set('Content-Type','text/html').status(200).send(`
      <!doctype html><html><head>
      <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"/>
      <title>SocialScale / SmartFlow — Setup</title>
      <style>
        body{font-family:system-ui;background:#0b0b0b;color:#f5f5f5;margin:0;padding:40px}
        .card{max-width:760px;margin:0 auto;background:#111;border:1px solid #222;border-radius:12px;padding:20px}
        code{background:#151515;border:1px solid #2a2a2a;border-radius:6px;padding:2px 6px}
      </style></head><body>
      <div class="card">
        <h1>Build required</h1>
        <p>Your React UI isn’t built yet. Run:</p>
        <pre><code>npm run build</code></pre>
        <p>Then <code>npm start</code> to serve <code>client/dist/</code> from Express on a single public port.</p>
        <p>Health: <a href="/health" style="color:#f5d67b">/health</a></p>
      </div>
      </body></html>
    `);
  });
}

// --- Port
const PORT = process.env.PORT || 8787;
app.listen(PORT, () => {
  console.log(`✅ Server up on :${PORT} — SPA hosting ${HAS_BUILD ? 'ENABLED' : 'PENDING BUILD'}`);
});

================================
FILE: client/package.json  (create if missing)
================================
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview --host --port 4173"
  },
  "devDependencies": {
    "vite": "^5.3.4"
  }
}

================================
FILE: client/index.html  (minimal placeholder if you don’t already have a React app)
================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>SocialScale / SmartFlow</title>
    <style>
      body{font-family:system-ui;background:#0b0b0b;color:#f5f5f5;margin:0}
      header{padding:14px 20px;background:#111;border-bottom:1px solid #222}
      main{max-width:960px;margin:0 auto;padding:24px}
      .gold{color:#d4af37}
      .pill{border:1px solid #2a2a2a;border-radius:999px;padding:4px 8px}
      a{color:#f5d67b}
    </style>
  </head>
  <body>
    <header><strong>SmartFlow Systems</strong> <span class="pill">Unified</span></header>
    <main>
      <h1 class="gold">SocialScale Platform — Working</h1>
      <p>If you already have a React app here, this placeholder will be replaced by your real UI when you run <code>npm run build</code>.</p>
      <ul>
        <li>Health: <a href="/health">/health</a></li>
        <li>API example: <a href="/api/_example">/api/_example</a></li>
      </ul>
    </main>
  </body>
</html>

================================
FILE: client/vite.config.js  (create or overwrite)
================================
import { defineConfig } from 'vite';

export default defineConfig({
  base: './',
  build: {
    outDir: 'dist',
    emptyOutDir: true
  },
  server: {
    // For local dev if you ever run vite directly
    host: true,
    port: Number(process.env.PORT) || 5173
  },
  preview: {
    host: true,
    port: 4173
  }
});

================================
INSTRUCTIONS TO RUN (Replit-friendly)
================================
1) Install deps:
   npm install

2) Build the UI:
   npm run build
   # This creates /client/dist

3) Start unified server (UI + API on ONE PORT):
   npm start
   # Server binds to $PORT (Replit) or 8787 locally

EXPECTED:
- Open the single public URL/port Replit gives your repl (it maps to $PORT).
- You should now see the dark/gold “SocialScale Platform — Working” page (or your real React UI if you already have it under /client).
- /health responds with JSON.
- /api/_example returns { ok: true }.

NOTE:
- If Flask is still running on 5000, that’s fine for internal stuff, but your public app now lives on the Node server’s $PORT.
