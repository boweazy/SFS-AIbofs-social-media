ROLE: Senior full-stack. Extend the existing SmartFlow Flask app by adding a browser-based tester for /api/generate_posts. Keep branding and previous pages intact. Make minimal changes: add route, page, JS, and nav link.

TASKS
1) Update files exactly as specified below (overwrite when listed).
2) Keep the rule-based generator backend unchanged except for adding the new route.

========================================
A) main.py — add a /tester route
========================================
# OVERWRITE FILE: main.py (copy full file)
from __future__ import annotations
import os, random, datetime
from typing import List
from flask import Flask, request, jsonify, render_template, send_from_directory
from pydantic import BaseModel, Field

APP_NAME = "SmartFlow Systems"
THEME = {"bg":"#0b0b0b","gold":"#d4af37","text":"#f2f2f2"}

app = Flask(__name__, static_folder="static", template_folder="templates")

# ------- Models for API -------
class GenerateRequest(BaseModel):
    topic: str = Field(..., description="Post topic")
    tone: str = Field("friendly", description="helpful|concise|friendly|bold")
    platform: str = Field("X", description="X|LinkedIn")
    count: int = Field(3, ge=1, le=10)
    niche: str = Field("local services")

class PostOut(BaseModel):
    text: str
    alt_text: str
    suggested_image: str
    hashtags: List[str]

# ------- Helpers for rule-based copy -------
HOOKS = [
  "Stop guessing. Start scaling.",
  "Your customers are online—are you?",
  "Automation that pays for itself.",
  "Turn followers into bookings.",
  "Make your operations feel effortless."
]

CTAS = [
  "Book a free 10-min demo.",
  "DM 'FLOW' to get started.",
  "Grab your spot for a quick walkthrough.",
  "Try the live demo—no card needed."
]

IMG_SUGGESTIONS = [
  "Dark UI mockup with gold accents",
  "Before/after metrics dashboard",
  "Booking calendar close-up",
  "AI chat widget on a website",
  "Hands on keyboard, gold lighting"
]

def platform_limit(platform:str)->int:
    return 280 if platform.upper()=="X" else 3000

def pick_hashtags(niche:str, platform:str)->List[str]:
    base = [
      f"#{niche.replace(' ','')}",
      "#SmartFlowSystems",
      "#Automation",
      "#SmallBusiness",
      "#Growth",
      "#AIforBusiness"
    ]
    random.shuffle(base)
    k = random.choice([3,4,5,6])
    return base[:k]

def make_post(topic:str, tone:str, platform:str, niche:str)->PostOut:
    hook = random.choice(HOOKS)
    benefit = "Save hours weekly and convert more leads"
    proof = "Used by UK SMBs across services, fitness, trades, and local retail"
    cta = random.choice(CTAS)

    body = f"{hook}\n{topic}—{benefit}. Proof: {proof}. {cta}"
    limit = platform_limit(platform)
    text = (body[:limit-1] + "…") if len(body) > limit else body

    return PostOut(
      text=text,
      alt_text=f"{platform} post: {topic} in {niche}, tone {tone}.",
      suggested_image=random.choice(IMG_SUGGESTIONS),
      hashtags=pick_hashtags(niche, platform)
    )

# ------- Routes -------
@app.get("/")
def home():
    return render_template("index.html", app_name=APP_NAME, theme=THEME)

@app.get("/pricing")
def pricing():
    plans = [
      {"name":"Starter","price":"£19/mo","bullets":["30 posts/mo","1 platform","Templates + Schedule"]},
      {"name":"Pro","price":"£49/mo","bullets":["90 posts/mo","2 platforms","Smart Replies, Best-Time, Export"]},
      {"name":"Premium","price":"£99/mo","bullets":["Unlimited drafts","Bulk Schedule + Experiments","Team seats (2)"]}
    ]
    return render_template("pricing.html", plans=plans, app_name=APP_NAME, theme=THEME)

@app.get("/portfolio")
def portfolio():
    samples = [
      {"title":"AI Social Bot","desc":"Generate + schedule with analytics","link":"#"},
      {"title":"Booking System","desc":"Stripe + Calendar + SMS reminders","link":"#"},
      {"title":"E-commerce Setup","desc":"Theme, payments, fulfilment","link":"#"},
      {"title":"Chat Agents","desc":"Lead capture & support automation","link":"#"}
    ]
    return render_template("portfolio.html", samples=samples, app_name=APP_NAME, theme=THEME)

@app.get("/health")
def health():
    return {"status":"ok","ts":datetime.datetime.utcnow().isoformat()}

@app.get("/_setup")
def setup_page():
    env = {
      "STRIPE_KEY": bool(os.getenv("STRIPE_KEY")),
      "OPENAI_API_KEY": bool(os.getenv("OPENAI_API_KEY")),
      "SMTP_USER": bool(os.getenv("SMTP_USER")),
    }
    missing = [k for k,v in env.items() if not v]
    steps = [
      "Optional: add STRIPE_KEY, OPENAI_API_KEY, SMTP_USER in the Replit Secrets for full stack features.",
      "Run the demo now without keys. API is rule-based.",
      "Click Pricing to preview plans. Use Portfolio to showcase builds.",
    ]
    return render_template("setup.html", env=env, missing=missing, steps=steps, app_name=APP_NAME, theme=THEME)

@app.post("/api/generate_posts")
def generate_posts():
    try:
      data = request.get_json(force=True) or {}
      req = GenerateRequest(**data)
    except Exception as e:
      return jsonify({"error": str(e)}), 400

    posts = [make_post(req.topic, req.tone, req.platform, req.niche).model_dump() for _ in range(req.count)]
    return jsonify({"platform": req.platform, "count": req.count, "posts": posts})

# NEW: simple browser tester page
@app.get("/tester")
def tester():
    return render_template("tester.html", app_name=APP_NAME, theme=THEME)

# Static
@app.get("/static/<path:filename>")
def static_files(filename):
    return send_from_directory("static", filename)

if __name__ == "__main__":
    port = int(os.getenv("PORT", "3000"))
    print("Quick links: /health  /_setup  /pricing  /portfolio  /tester")
    app.run(host="0.0.0.0", port=port)

========================================
B) templates/base.html — add nav link to Tester
========================================
# OVERWRITE FILE: templates/base.html (full file)
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>{{ app_name }}</title>
  <meta name="theme-color" content="{{ theme.bg }}"/>
  <link rel="icon" href="/static/favicon.png"/>
  <link rel="stylesheet" href="/static/style.css"/>
</head>
<body>
  <header class="site-header">
    <div class="logo-wrap">
      <img src="/static/logo.svg" alt="SmartFlow Systems logo" class="logo"/>
      <span class="brand">SmartFlow Systems</span>
    </div>
    <nav class="nav">
      <a href="/">Home</a>
      <a href="/pricing">Pricing</a>
      <a href="/portfolio">Portfolio</a>
      <a href="/tester">Generator</a>
      <a href="/_setup">Setup</a>
      <a href="https://replit.com/@Smart-F-Syst/SFS-AIbofs-social-media" class="cta">Live Demo</a>
    </nav>
  </header>
  <main class="container">
    {% block content %}{% endblock %}
  </main>
  <footer class="site-footer">
    <span>© SmartFlow Systems — Black & Gold. Smooth. Street-Smart. Futuristic.</span>
  </footer>
</body>
</html>

========================================
C) templates/tester.html — UI form + results
========================================
# CREATE FILE: templates/tester.html
{% extends "base.html" %}
{% block content %}
<h1>Generator Tester</h1>
<p>Fill the form and preview JSON posts instantly (no API keys needed).</p>

<form id="genForm" class="card form">
  <label>
    <span>Topic</span>
    <input type="text" name="topic" placeholder="Launch week promo" required />
  </label>

  <label>
    <span>Tone</span>
    <select name="tone">
      <option value="helpful">helpful</option>
      <option value="concise">concise</option>
      <option value="friendly" selected>friendly</option>
      <option value="bold">bold</option>
    </select>
  </label>

  <label>
    <span>Platform</span>
    <select name="platform">
      <option value="X" selected>X</option>
      <option value="LinkedIn">LinkedIn</option>
    </select>
  </label>

  <label>
    <span>Count</span>
    <input type="number" name="count" min="1" max="10" value="3"/>
  </label>

  <label>
    <span>Niche</span>
    <input type="text" name="niche" placeholder="SMB owners"/>
  </label>

  <button type="submit" class="btn">Generate</button>
</form>

<div id="results" class="cards"></div>

<script src="/static/tester.js" defer></script>
{% endblock %}

========================================
D) static/tester.js — call API and render cards
========================================
# CREATE FILE: static/tester.js
async function generate(e){
  e.preventDefault();
  const form = e.target;
  const data = {
    topic: form.topic.value.trim(),
    tone: form.tone.value,
    platform: form.platform.value,
    count: Math.max(1, Math.min(10, parseInt(form.count.value || "3", 10))),
    niche: form.niche.value.trim() || "SMB owners"
  };

  const res = await fetch("/api/generate_posts", {
    method:"POST",
    headers:{"Content-Type":"application/json"},
    body: JSON.stringify(data)
  });

  const out = document.getElementById("results");
  out.innerHTML = "";

  if(!res.ok){
    const err = await res.text();
    const card = document.createElement("div");
    card.className = "card";
    card.innerHTML = `<h3>Error</h3><pre>${err}</pre>`;
    out.appendChild(card);
    return;
  }

  const json = await res.json();
  (json.posts || []).forEach((p, idx) => {
    const card = document.createElement("div");
    card.className = "card";
    const tags = (p.hashtags || []).join(" ");
    card.innerHTML = `
      <h3>Post ${idx+1}</h3>
      <p style="white-space:pre-wrap">${p.text}</p>
      <p><strong>Suggested image:</strong> ${p.suggested_image}</p>
      <p><strong>Alt text:</strong> ${p.alt_text}</p>
      <p><strong>Hashtags:</strong> ${tags}</p>
      <button class="btn btn-outline" data-copy="${p.text.replace(/"/g,'&quot;')}">Copy Text</button>
    `;
    out.appendChild(card);
  });

  // copy buttons
  out.querySelectorAll("button[data-copy]").forEach(btn=>{
    btn.addEventListener("click", ()=>{
      const text = btn.getAttribute("data-copy");
      navigator.clipboard.writeText(text);
      btn.textContent = "Copied!";
      setTimeout(()=>btn.textContent="Copy Text", 1000);
    });
  });
}

window.addEventListener("DOMContentLoaded", ()=>{
  const form = document.getElementById("genForm");
  form.addEventListener("submit", generate);
});

========================================
E) static/style.css — tiny tweaks for form/layout
========================================
# UPDATE FILE: static/style.css (append to end; do not remove existing)
.form{display:grid;grid-template-columns:repeat(5,minmax(0,1fr));gap:12px;align-items:end;margin-bottom:16px}
.form label{display:flex;flex-direction:column;gap:6px}
.form input,.form select{padding:10px;border-radius:6px;border:1px solid #2a2a2a;background:#0f0f0f;color:var(--text)}
.cards .card h3{margin-top:0}
@media (max-width:900px){.form{grid-template-columns:1fr 1fr;}}
@media (max-width:540px){.form{grid-template-columns:1fr;}}

========================================
F) README.md — note the tester page
========================================
# UPDATE FILE: README.md (append)
- /tester    Browser UI to call /api/generate_posts and preview results
- Tip: Use X for short copy (<=280 chars) and LinkedIn for long form.

DONE CRITERIA
- Visiting /tester shows a form.
- Submitting shows 1–10 cards with text, alt_text, suggested_image, hashtags.
- “Copy Text” button works.
- Nav includes “Generator”.