REPLIT AGENT PROMPT — SmartFlow Premium AI Bot

What it is:
- A premium, brand‑styled AI chat widget (launcher + accessible modal) with a secure Node/Express backend proxy to OpenAI using a concise SmartFlow system prompt.

Files & where they go:
- /server.js  (Node/Express API + static hosting, Helmet/CORS/compression, rate limit)
- /package.json (scripts + deps)
- /static/smartflow-theme.css (brand theme)
- /static/app.js (modal logic, send/telemetry)
- /index.html (links theme, launcher + modal markup)
- /.env.example (copy to .env)

Setup:
- Packages: express, helmet, compression, cors, express-rate-limit, dotenv, node-fetch
- Secrets: Add OPENAI_API_KEY in Replit Secrets (or .env from example)
- Static served from /static

Run on Replit (Node):
- Shell: `npm install`
- Start: `npm start`  (opens http://localhost:3000)
- Open webview → “Chat with SmartFlow”

— CODE (paste unchanged below) —

# /server.js
import 'dotenv/config';
import express from 'express';
import helmet from 'helmet';
import compression from 'compression';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Why helmet/compression: better security + perf out‑of‑the‑box.
app.use(helmet({
  contentSecurityPolicy: {
    useDefaults: true,
    directives: {
      "script-src": ["'self'", "'unsafe-inline'"],
      "connect-src": ["'self'", "https://api.openai.com"],
      "img-src": ["'self'", "data:"],
      "style-src": ["'self'", "'unsafe-inline'"]
    }
  }
}));
app.use(compression());
app.use(cors({ origin: true }));
app.use(express.json({ limit: '1mb' }));

// Why limit: prevent abuse / surprise bills.
const limiter = rateLimit({
  windowMs: 60_000,
  max: 30,
  standardHeaders: true,
  legacyHeaders: false
});
app.use('/api/', limiter);

// Static
app.use('/static', express.static(path.join(__dirname, 'static')));

// Health
app.get('/health', (_req, res) => res.json({ ok: true }));

// === SmartFlow System Prompt (short, sharp, brand-aligned) ===
// Why: consistent persona + safer outputs + task orientation.
const SMARTFLOW_SYSTEM_PROMPT = `
You are SmartFlow, a crisp, helpful AI that solves tasks quickly without fluff.
Style: concise, confident, premium. If code is requested, return complete, runnable code.
Safety: refuse disallowed content; suggest safe alternatives. Never invent facts.
UX: break down plans in short steps, then deliver the answer. Prefer readable, maintainable code.
Brand voice: clear, modern, respectful; avoid hype.`;

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  console.error('Missing OPENAI_API_KEY in environment.');
}

app.post('/api/chat', async (req, res) => {
  try {
    const { messages, model = 'gpt-4o-mini', temperature = 0.3, max_tokens = 800 } = req.body || {};
    if (!Array.isArray(messages) || messages.length === 0) {
      return res.status(400).json({ error: 'messages array required' });
    }

    // Why sanitize: avoid prompt injection via user content.
    const trimmed = messages.map(m => ({
      role: m.role,
      content: String(m.content || '').slice(0, 4000)
    })).slice(-12); // keep last 12 turns to control cost

    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model,
        temperature,
        max_tokens,
        messages: [
          { role: 'system', content: SMARTFLOW_SYSTEM_PROMPT },
          ...trimmed
        ]
      })
    });

    if (!openaiRes.ok) {
      const text = await openaiRes.text();
      return res.status(openaiRes.status).json({ error: 'Upstream error', details: text });
    }

    const data = await openaiRes.json();
    const answer = data?.choices?.[0]?.message?.content ?? '';
    res.json({ answer, usage: data?.usage ?? null });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`SmartFlow running → http://localhost:${PORT}`));



# /package.json
{
  "name": "smartflow-app",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "node server.js",
    "start": "node server.js"
  },
  "dependencies": {
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-rate-limit": "^7.4.0",
    "helmet": "^7.1.0",
    "node-fetch": "^3.3.2"
  }
}



# /static/smartflow-theme.css
:root{
  --sf-black:#0D0D0D; --sf-brown:#3B2F2F;
  --sf-gold:#FFD700; --sf-gold-2:#E6C200;
  --sf-beige:#F5F5DC; --sf-white:#FFFFFF;
}

html,body{
  background:var(--sf-black);
  color:var(--sf-beige);
  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji";
  line-height:1.5;
}

h1,h2,h3,strong{ color:var(--sf-white) }

a{ color:var(--sf-gold); text-decoration:none }
a:hover{ text-decoration:underline }

.container{ max-width:960px; margin:0 auto; padding:1.25rem }

.card{
  background:var(--sf-brown);
  border:1px solid #2a2121;
  border-radius:14px;
  box-shadow:0 10px 30px rgba(0,0,0,.35);
  padding:1rem;
}

.btn,.chat-launch{
  background:var(--sf-gold);
  color:#111;
  font-weight:700;
  border:none;
  border-radius:12px;
  padding:.85rem 1.1rem;
  transition:.2s transform,.2s box-shadow,.2s background;
  cursor:pointer;
}

.btn:hover,.chat-launch:hover{
  background:linear-gradient(90deg,var(--sf-gold) 0%, var(--sf-gold-2) 100%);
  box-shadow:0 8px 24px rgba(255,215,0,.25);
  transform:translateY(-1px);
}

.input,.chat-input{
  background:#151515;
  color:var(--sf-beige);
  border:1px solid #222;
  border-radius:10px;
  padding:.75rem .9rem;
}

.badge{
  background:#141212; color:var(--sf-gold);
  border:1px solid #2a2121; padding:.2rem .5rem; border-radius:999px;
}

/* Chat modal */
.chat-modal-backdrop{
  position:fixed; inset:0; background:rgba(0,0,0,.55);
  display:none; align-items:center; justify-content:center;
  z-index:999;
}
chat-modal{ width:min(720px,92vw); max-height:85vh; display:flex; flex-direction:column }
.chat-header{
  display:flex; align-items:center; justify-content:space-between;
  padding:.8rem 1rem; border-bottom:1px solid #2a2121;
}
.chat-body{
  overflow:auto; padding:1rem; display:flex; flex-direction:column; gap:.75rem;
  background: #121212;
}
.chat-footer{
  display:flex; gap:.5rem; padding:.75rem; border-top:1px solid #2a2121; background:#101010;
}

.chat-bubble{ padding:.75rem .9rem; border-radius:12px; font-size:.95rem; max-width:85% }
.chat-bubble.bot{ background:#171717; border:1px solid #262626; color:var(--sf-beige) }
.chat-bubble.user{ background:#231b1b; border:1px solid #312525; color:var(--sf-white); margin-left:auto }

.chat-launch{ position:fixed; right:1rem; bottom:1rem }

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  .btn,.chat-launch{ transition:none }
}

/* Mobile */
@media (max-width: 520px){
  .chat-modal{ width:96vw }
  .chat-bubble{ max-width: 92% }
}



# /static/app.js
/* Why: centralize helpers & telemetry to extend later without code churn. */
window.SF = {
  cta: (label, url) => ({ label, url, style: 'gold' }),
  track: (ev, p) => console.log('sf_event', ev, p)
};

(function(){
  const qs = s => document.querySelector(s);
  const backdrop = qs('#chat-backdrop');
  const modal = qs('#chat-modal');
  const openBtn = qs('.chat-launch');
  const closeBtn = qs('#chat-close');
  const form = qs('#chat-form');
  const input = qs('#chat-input');
  const list = qs('#chat-list');
  const sendBtn = qs('#chat-send');
  const typing = qs('#chat-typing');

  let lastFocus = null;

  function openModal(){
    window.SF.track('chat_open');
    lastFocus = document.activeElement;
    backdrop.style.display = 'flex';
    setTimeout(()=> input.focus(), 0);
  }
  function closeModal(){
    backdrop.style.display = 'none';
    if (lastFocus) lastFocus.focus();
  }

  // Focus trap for a11y
  backdrop.addEventListener('keydown', (e)=>{
    if (e.key === 'Escape') closeModal();
    if (e.key === 'Tab'){
      const focusables = modal.querySelectorAll('button, [href], input, textarea, [tabindex]:not([tabindex="-1"])');
      const f = Array.from(focusables);
      if (!f.length) return;
      const first = f[0], last = f[f.length-1];
      if (e.shiftKey && document.activeElement === first){ last.focus(); e.preventDefault(); }
      else if (!e.shiftKey && document.activeElement === last){ first.focus(); e.preventDefault(); }
    }
  });

  openBtn.addEventListener('click', openModal);
  closeBtn.addEventListener('click', closeModal);
  backdrop.addEventListener('click', (e)=>{ if (e.target === backdrop) closeModal(); });

  function pushBubble(role, text){
    const div = document.createElement('div');
    div.className = `chat-bubble ${role}`;
    div.textContent = text;
    list.appendChild(div);
    list.scrollTop = list.scrollHeight;
  }

  async function sendMessage(text){
    window.SF.track('chat_send');
    typing.hidden = false;
    sendBtn.disabled = true;

    pushBubble('user', text);
    input.value = '';

    try{
      const res = await fetch('/api/chat', {
        method:'POST',
        headers:{ 'Content-Type':'application/json' },
        body: JSON.stringify({ messages: [
          { role:'user', content: text }
        ]})
      });

      if (!res.ok) {
        const err = await res.json().catch(()=>({}));
        throw new Error(err?.error || 'Network error');
      }

      const data = await res.json();
      pushBubble('bot', data.answer || '…');
    }catch(err){
      pushBubble('bot', 'Sorry, I ran into an issue. Please try again.');
      console.error(err);
    }finally{
      typing.hidden = true;
      sendBtn.disabled = false;
      input.focus();
    }
  }

  form.addEventListener('submit', (e)=>{
    e.preventDefault();
    const text = input.value.trim();
    if (!text) return;
    sendMessage(text);
  });
})();



# /index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>SmartFlow Systems</title>
  <link rel="stylesheet" href="/static/smartflow-theme.css">
  <!-- If you have a base CSS, link it before the theme. -->
</head>
<body>
  <header class="container">
    <h1>SmartFlow Systems</h1>
    <p class="badge">Black / Brown / Gold Premium</p>
  </header>

  <main class="container">
    <div class="card">
      <h2>Premium AI Assistant</h2>
      <p>Fast, precise help — coding, content, research, and more.</p>
      <button class="btn" id="cta-demo">Get Started</button>
    </div>
  </main>

  <!-- Chat Launcher -->
  <button class="chat-launch" aria-haspopup="dialog" aria-controls="chat-backdrop">Chat with SmartFlow</button>

  <!-- Chat Modal -->
  <div class="chat-modal-backdrop" id="chat-backdrop" role="dialog" aria-modal="true" aria-label="SmartFlow Chat">
    <div class="card chat-modal" id="chat-modal">
      <div class="chat-header">
        <strong>SmartFlow Chat</strong>
        <button class="btn" id="chat-close" aria-label="Close chat">Close</button>
      </div>
      <div class="chat-body" id="chat-list" aria-live="polite"></div>
      <div class="chat-footer">
        <form id="chat-form" style="display:flex;gap:.5rem;flex:1">
          <input id="chat-input" class="chat-input" placeholder="Ask anything…" aria-label="Chat message" style="flex:1" />
          <button id="chat-send" class="btn" type="submit">Send</button>
        </form>
        <span id="chat-typing" class="badge" hidden>SmartFlow is typing…</span>
      </div>
    </div>
  </div>

  <script src="/static/app.js"></script>
  <script>
    // Example CTA using window.SF helpers.
    document.getElementById('cta-demo').addEventListener('click', ()=>{
      const { label, url } = window.SF.cta('Open Chat', '#');
      window.SF.track('cta_click', { label, url });
      document.querySelector('.chat-launch').click();
    });
  </script>
</body>
</html>



# /.env.example
# Copy to .env and set your API key.
OPENAI_API_KEY=sk-REPLACE_ME
PORT=3000